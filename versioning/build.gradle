ext {
	ver = new Properties()	
	verFile = new File(project.projectDir, "version.props")
}

def load(file) {
	file.withInputStream {
	    ver.load(it)
	}
}

load(verFile)

def store(file) {
	ver.store(file.newWriter(), null)
	ver = new Properties()
	load(file)
}

def getBuild() {
	return ver.build
}

def getVersion() {
	def branch = getBranch()
	if(branch=="master") return getMasterVersion()
	if(branch.startsWith("hotfix")) return getMasterNextPatch()
	return getDevelVersion();
}

def getMasterVersion() {
	return ver.major + "." + ver.minor + "." + ver.patch
}

def getMasterNextPatch() {
	return ver.major + "." + ver.minor + "." + (Integer.valueOf(ver.patch)+1)
}

def getDevelVersion() {
	return ver.major + "." + (Integer.valueOf(ver.minor)+1)
}

def getArtifactVersion(branch) {
	if(branch == null) branch = getBranch()
	if(branch == "master")
		return ver.major + "." + ver.minor + "." + ver.patch
	if(branch == "develop")
		return ver.major + "." + ver.minor + "-SNAPSHOT"
	if(branch.startsWith("release")) {
		return ver.major + "." + ver.minor + "-RC"
	}
}

def setBuild() {
	def num = ver.build as Integer
	if(num == null) num = 0
	ver.setProperty("build", (num + 1).toString())
	store(verFile)
}

def setVersion() {
	def minor = ver.minor as Integer
	if(minor == null) minor = 0
	ver.setProperty("minor", (minor+1).toString())
	ver.setProperty("patch", "0")
	store(verFile)
}

def setPatch() {
	def patch = ver.patch as Integer
	if(patch == null) patch = 0
	ver.setProperty("patch", (patch+1).toString())
	store(verFile)
}

def getBranch() {
	def ret = "master"
	new ByteArrayOutputStream().withStream { os ->
		project.exec {
			executable = 'git'
			args = ["branch"]
			standardOutput = os
		}
		def out = os.toString()
		out.eachLine { line, count ->
			if(line.startsWith("*")) {
				ret = line.substring(2);
			}	
		}
	}
	return ret
}

group = "nl.novadoc.utils"
version = getVersion()

project.ext {
    layout="eclipse"
    javaVersion="1.8"
    useUtils=true
    useLogging=true
    useLog4j=false
    executable=false
    fatJar=false
    srcJar=false
    encryptConf=false
    windowsExe=false
    useFileNetLibs=false
    fnVersion='5.2'
}

apply from: "${project.localPluginsUrl}/default.gradle"

dependencies {
}

apply from: "${project.localPluginsUrl}/jar.gradle"

task release {
	doLast {
		setVersion()
		println("Development version now: " + getDevelVersion())
		println("Master version now: " + getMasterVersion())
	}
}

task hotfix {
	doLast {
		setPatch()
		println("Patch version now: " + getMasterVersion())
	}
}

assemble.doLast {
	setBuild()
	println("Build# " + getBuild())
	println("Version " + project.version)
	println("Artifact-version: " + getArtifactVersion())
}
